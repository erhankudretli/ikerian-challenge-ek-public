name: Terraform Apply
run-name: Deployment to ${{ github.ref_name }} - Run Number ${{ github.run_number }}

# Trigger on push to 'dev' or 'prd' branches only.
on:
  push:
    branches:
      - dev
      - prd

# Requires 'write' permissions for state manipulation.
permissions:
  contents: write 
# 'pull-requests: write' is required for adding PR comments (e.g., Infracost).
  pull-requests: write 

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    
    # AWS credentials provided via repository secrets.
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
    
    # This job doesn't need environment approval, it just prepares the plan.
    #environment: ${{ github.ref_name }} 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # Set working directory (dev or prd).
      - name: Set Working Directory
        id: set-dir
        run: |
          echo "dir=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ steps.set-dir.outputs.dir }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ steps.set-dir.outputs.dir }}

      - name: Terraform Plan & Save to Binary
        id: plan
        run: |
          # Saves the plan as both human-readable text (no color) and binary artifact.
          terraform plan -no-color -var-file=terraform.tfvars -out=tfplan.binary | tee tfplan.txt
        working-directory: ${{ steps.set-dir.outputs.dir }}

      - name: Upload Plan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}-tfplan-${{ github.run_id }}
          path: |
            ${{ steps.set-dir.outputs.dir }}/tfplan.txt
            ${{ steps.set-dir.outputs.dir }}/tfplan.binary

      # ---------------- INFRACOST COST ESTIMATION ----------------
      - name: Setup Infracost CLI
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Run Infracost Breakdown
        run: |
          infracost breakdown \
            --path ${{ steps.set-dir.outputs.dir }}/tfplan.binary \
            --format table \
            --out-file infracost.txt
          echo "----- Infracost Breakdown -----"
          cat infracost.txt
        # Pass API key via env var for the CLI tool
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }} 

      - name: Upload Infracost Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}-infracost-${{ github.run_id }}
          path: infracost.txt

      - name: Summary (Terraform Plan + Cost)
        run: |
          echo "## MANUAL APPROVAL REQUIRED: Please review the Plan and Cost before approving deployment to ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          
          echo "## Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat ${{ steps.set-dir.outputs.dir }}/tfplan.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          echo "## Infracost Estimate" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat infracost.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY


  terraform-apply:
    needs: terraform-plan # Must wait for plan/cost estimation to finish.
    runs-on: ubuntu-latest
    
    # This environment setting triggers the "Required reviewers" protection rule.
    environment: ${{ github.ref_name }} 
    
    # Only runs on 'dev' or 'prd' branches.
    if: github.ref_name == 'dev' || github.ref_name == 'prd' 

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Working Directory
        id: set-dir
        run: |
          echo "dir=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      # Download the binary plan artifact for safe application.
      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.ref_name }}-tfplan-${{ github.run_id }}
          path: ${{ steps.set-dir.outputs.dir }} # Download to the working directory.

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ steps.set-dir.outputs.dir }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan.binary
        working-directory: ${{ steps.set-dir.outputs.dir }}

      - name: Generate Terraform Docs
        uses: terraform-docs/gh-actions@v1.1.0
        with:
          output-file: terraform-docs.md
          output-method: inject
          working-dir: ${{ steps.set-dir.outputs.dir }}

      - name: Commit & Push Updated Docs
        run: |
          cd ${{ steps.set-dir.outputs.dir }}
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Terraform docs updated, committing changes..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add terraform-docs.md
            git commit -m "chore(docs): auto-update terraform-docs after apply"
            git push
          else
            echo "No documentation changes detected."
          fi      
